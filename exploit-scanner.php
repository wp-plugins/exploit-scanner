<?php
/*
Plugin Name: WordPress Exploit Scanner
Plugin URI: http://ocaoimh.ie/exploit-scanner/
Description: Scans your WordPress site for possible exploits
Version: 0.2
Author: Donncha O Caoimh
Author URI: http://ocaoimh.ie/
*/

function exploit_init() {
	add_action('admin_menu', 'exploit_config_page');
}
add_action('init', 'exploit_init');

function exploit_config_page() {
	if ( function_exists('add_submenu_page') )
		add_submenu_page('index.php', __('Exploit Scanner'), __('Exploit Scanner'), 'manage_options', 'exploit-admin-page', 'exploit_admin_page');

}

function exploit_admin_page() {
	global $suspicious_files, $wpdb, $wp_db_version;
	if( !current_user_can( 'manage_options' ) )
		wp_die( 'Not allowed here!' );
	?><div class="wrap">
	<h2>Exploit Scanner</h2>
	<p>This script searches through your WordPress install for text that is commonly used by spammers and hackers when a website is compromised.</p>
	<span style='margin-left: 20%; float: left; padding: 5px;'><a href="?page=exploit-admin-page&search=all">Search Files and Database</a></span>
	<span style='float: left; padding: 5px;'><a href="?page=exploit-admin-page&search=files">Search Files Only</a></span>
	<span style='float: left; padding: 5px;'><a href="?page=exploit-admin-page&search=db">Search Database Only</a></span><br clear='all' />
	<div style='margin-top: 10px; text-align:center'>Or search the files on your site for your own words: <form method='GET'><input type='hidden' name='page' value='exploit-admin-page' /><input type='hidden' name='search' value='files' /><input type='text' name='search_strings' /><input type='Submit' value='Search Files' /></form></div>
	<?php
	switch( $_GET[ 'search' ] ) {
		case 'doall':
			$search_strings = '';
			if( $_GET[ 'search_strings' ] )
				$search_strings = array_flip( explode( ',', $_GET[ 'search_strings' ] ) );
			file_search( $search_strings );
			db_search();
		break;
		case 'dofiles':
			file_search();
		break;
		case 'all':
		case 'files':
			$search_strings = '';
			if( isset( $_GET[ 'search_strings' ] ) )
				$search_strings = $_GET[ 'search_strings' ];
			loading_search( $_GET[ 'search' ], $search_strings );
		break;
		case 'db':
			db_search();
		break;
		default:
		?>
			<p><strong>DISCLAIMER</strong> Unfortunately it's impossible to catch every hack, and it's also too easy to catch "false positives" or things that aren't hacks. If you have been hacked, this script may help you track down what files, comments or posts have been modified. On the other hand, if this script indicates your blog is clean, don't believe it. This is far from foolproof. </p>
			<p>If you're paranoid, to prevent someone hiding malicious code inside this plugin, here's the md5 hash of this file. Compare that with the one on the plugin homepage. If they match, this file is ok. You'll get extra points if you check this file has the actual md5() call.<p>
			<?php
			echo "<p>Version 0.1 md5: <code>" . md5( file_get_contents( ABSPATH . PLUGINDIR . "/exploit-scanner/exploit-scanner.php" ) ) . "</code></p>";
		break;
	}

	if( $wp_db_version < "8204" ) {
		echo "<p><strong>Warning!</strong> You <em>must</em> be running WordPress 2.6.3 for this plugin to work properly. Please upgrade. If there is a newer version of WordPress, please check the plugin homepage for an update.</p>";
	} elseif( $wp_db_version > "8204" ) {
		echo "<p><strong>Warning!</strong> This version of the plugin was designed for WordPress 2.6.3. It uses checksums to verify that files have not been modified. You are using a newer version of WordPress and may see more false positive file results.</p>";
	}
	?></div><?php
}

function search_install( $directory, $text ) {
	global $suspicious_files, $modified_core_files;
	set_time_limit( 60 );
	include_once( WP_PLUGIN_DIR . '/exploit-scanner/md5list.php' );

	if(is_dir($directory)) {
		$directory = trailingslashit( $directory );
		$entries = glob($directory. '*');
		if( is_array( $entries ) && !empty( $entries ) ) foreach ($entries as $entry) {
			if ($entry != '.' && $entry != '..') {
				if( !is_dir( $entry ) ) {
					$filename = str_replace( ABSPATH, '', $entry );
					$contents = file_get_contents( $entry );
					$m = md5( $contents );
					reset( $text );
					foreach( $text as $exploit ) {
						if( $exploit == '' )
							continue;
						if( strpos( $contents, $exploit ) !== false ) {
							if( !isset( $md5_list[ $filename ] ) || ( isset( $md5_list[ $filename ] ) && $m != $md5_list[ $filename ] ) ) {
								$suspicious_files[ $exploit ][] = $entry;
							}
						}
					}
					if( isset( $md5_list[ $filename ] ) && $m != $md5_list[ $filename ] ) {
						$modified_core_files[] = $entry;
					}
				} else {
					search_install($entry, $text);
				}
			}
		}
	}
}

function hilight_text( $contents, $text ) {
	while( $contents ) {
		$contents = substr( $contents, abs( strpos( $contents, $text ) - 50 ) );
		echo "<p>" . nl2br( str_replace( wp_specialchars( $text ), "<span style='background: #ff0'>" . wp_specialchars( $text ) . "</span>", wp_specialchars( substr( $contents, 0, 300 ) ) ) ) . "</p>";
		$contents = substr( $contents, strpos( $contents, $text ) + strlen( $text ) );
		if( strpos( $contents, $text ) === false ) {
			$contents = false;
		} else {
			echo "<hr>";
		}
	}
}

function file_search( $suspect_text = '' ) {
	global $suspicious_files, $wpdb, $wp_db_version, $modified_core_files;

	if ( (int) @ini_get('memory_limit') < 64 )
		@ini_set( 'memory_limit', '64MB' ); // increase the memory limit if possible, to avoid out of memory errors
	$suspicious_files = array();
	if( $suspect_text == '' )
		$suspect_text = array( "iframe src" => "iframes can sometimes be used by hackers to load their own adverts and code on your site.", 
			"style=\"visibility:hidden" => "CSS styling to hide parts of a web page", 
			"ShellBOT" => "This may be a script used by hackers to get control of your server.", 
			"uname -a" => "Tells a hacker what operating system your server is running", 
			"shell_exec" => "Executes a server command like ls, cd, wget, etc. This may be a script used by hackers.", 
			"YW55cmVzdWx0cy5uZXQ=" => "Base64 encoded text found in PHP code that redirects visitors from Google.", 
			"<u style='display:none'>" => "HTML code used to hide spammy links, but is also legitimate code.", 
			"eval(unescape" => "Could be Javascript code used to hide code inserted by a hacker.", 
			"String.fromCharCode" => "Javascript code used to hide suspicious code, but can also be legitimate code.", 
			'$_COOKIE["yahg"]' => "YAHG Googlerank.info exploit code. See <a href='http://creativebriefing.com/wordpress-hacked-googlerankinfo/'>here</a> for further info." );
	search_install( ABSPATH, array_keys( $suspect_text ) );
	if( !empty( $modified_core_files ) ) {
		echo '<h3>Modified Core Files</h3>';
		echo '<p>Core WordPress files should never be modified, except for the Akismet plugin which may be upgraded separately from WordPress. If <em>akismet.php</em> appears here and you have upgraded the plugin then this is probably a false alarm. It might be worth double checking by <a href="http://wordpress.org/extend/plugins/akismet/">downloading</a> it again if you suspect your system has suffered a break in.</p>';
		echo '<ol>';
		foreach( $modified_core_files as $filename ) {
			echo "<li> $filename</li>";
		}
		echo "</ol>";
	}
	if( !empty( $suspicious_files ) ) {
		echo '<h3>Suspicious Files</h3><ol>';
		foreach( $suspicious_files as $exploit => $files ) {
			echo "<li><strong>\"" . wp_specialchars( $exploit ) . "\"</strong> <em>{$suspect_text[$exploit]}</em> <ol>";
			foreach( $files as $file ) {
				$contents = file_get_contents( $file );
				echo "<li>" . wp_specialchars( $file ) . " <blockquote style='border: 1px solid #333; background: #eee;'><code>";
				hilight_text( $contents, $exploit );
				echo "</code></blockquote></li>";
			}
			?></ol></li><?php
		}
		?></ol><?php

			echo "<p>Don't worry if <code>'" . ABSPATH . PLUGINDIR . "/exploit-scanner/exploit-scanner.php'</code> is listed above. That's a good sign because this script obviously has all the text to search for and it's working properly!</p>";
	} else {
		?><h3>No suspicious files found</h3>
		<p>That's unusual because you should at least see this plugin, <code>'<?php echo ABSPATH . PLUGINDIR ?>/exploit-scanner.php'</code>, in the list. Check your PHP error_log to make sure everything worked ok.</p><?php
	}
}

function db_search() {
	global $wpdb;
	$active_plugins = get_option( 'active_plugins' );
	if( is_array( $active_plugins ) && !empty( $active_plugins ) ) {
		$suspect_plugins = array();
		foreach( $active_plugins as $plugin ) {
			if( strpos( $plugin, '..' ) !== false || substr( $plugin, -4 ) != '.php' ) {
				$suspect_plugins[] = $plugin;
			}
		}
		if( !empty( $suspect_plugins ) ) {
			?><h3>Suspect Plugins</h3>
				<p>These plugin files look suspect. Please verify they are files you uploaded.</p><?php
				reset( $suspect_plugins );
			echo "<ol>";
			foreach( $suspect_plugins as $plugin ) {
				if( $plugin == '' )
					$plugin = "Blank entry found. Should be removed. It will look like 'i:0;s:0:\"\";' in the active_records field.";
				echo  "<li>$plugin</li>";
			}
			echo "</ol>";
		} else {
			?><h3>No suspicious plugins found</h3>
			<p>Hooray! No suspicious plugins found in the <code>active_plugins</code> database record.</p><?php
		}
	}
	$comments = $wpdb->get_results( "SELECT * FROM {$wpdb->comments} WHERE comment_content LIKE '%ekibastos%' LIMIT 0,10" );
	if( $comments ) {
		echo "<h4>Ekibastos comments found</h4>";
		echo "<p>Hackers have left a comment or trackback with the string \"Ekibastos\" on your blog. This may be a sign that they attacked your site in the past. Files or posts may be modified!</p>";
		echo "<pre>" . print_r( $comments, 1 ) . "</pre>";
	}
	$suspect_posts = array();
	$suspect_post_text = array( "ekibastos", "visibility:hidden", "<iframe ", "display:none" );
	foreach( $suspect_post_text as $exploit_text ) {
		$posts = $wpdb->get_results( "SELECT * FROM {$wpdb->posts} WHERE post_content LIKE '%{$exploit_text}%'" );
		if( $posts )
			$suspect_posts[ $exploit_text ] = $posts;
		$comments = $wpdb->get_results( "SELECT * FROM {$wpdb->comments} WHERE comment_content LIKE '%{$exploit_text}%'" );
		if( $comments )
			$suspect_posts[ $exploit_text ] = $comments;
	}
	if( !empty( $suspect_posts ) ) {
		echo "<h3>Suspect posts and comments found</h3>";
		echo "<p>Some posts and comments on your blog have text that may have been placed by hackers.</p><p><ul>";
		foreach( $suspect_posts as $exploit => $posts ) {
			foreach( $posts as $post )
				if( $post->post_content ) {
					$edit_url = "Post: <a href='post.php?action=edit&post={$post->ID}'>{$post->post_title}</a>";
					$contents = $post->post_content;
				} else {
					$edit_url = "Comment: <a href='comment.php?action=editcomment&c={$post->comment_ID}'>{$post->comment_author}</a>";
					$contents = $post->comment_content;
				}
				echo "<li>{$edit_url}<br /><blockquote style='border: 1px solid #333; background: #eee;'><code>";
				hilight_text( $contents, $exploit );
				echo "</code></blockquote></li>";
		}
		echo "</ul>";
	} else {
		?><h3>No suspicious posts or comments found</h3>
		<p>Hooray! No suspicious text found in your posts or comments tables!</p><?php
	}
}

function loading_search( $search, $search_strings = '' ) {
	if( $search = 'all' ) {
		$msg = "<strong>Searching your filesystem and database for spammy links, malicious Javascript and exploit code</strong><br /><br />Please wait while loading ...";
	} else {
		$msg = "<strong>Searching your filesystem for malicious Javascript and exploit code</strong><br /><br />Please wait while loading ...";
	}
	?><div style='margin: 10px; padding: 10px; border: 1px solid #333; margin-top: 30px; text-align: center'><?php echo $msg; ?><br /><br />If your browser doesn't start loading, please <a href='?page=exploit-admin-page&search=do<?php echo $search; if( $search_strings != '' ) { echo '&search_strings=' . urlencode( $search_strings ); } ?>'>click here</a> to start the search.</div><?php
	?>
	<script type='text/javascript'>
		<!--
		function nextpage() {
			location.href = "?page=exploit-admin-page&search=do<?php echo $search; if( $search_strings != '' ) { echo '&search_strings=' . urlencode( $search_strings ); } ?>";
		}
	setTimeout( "nextpage()", 50 );
	//-->
	</script>
	<?php
	flush();
}
?>
