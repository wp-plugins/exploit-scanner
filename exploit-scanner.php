<?php
/*
Plugin Name: WordPress Exploit Scanner
Plugin URI: http://ocaoimh.ie/exploit-scanner/
Description: Scans your WordPress site for possible exploits.
Version: 0.8
Author: Donncha O Caoimh
Author URI: http://ocaoimh.ie/
*/

/**
 * Exploit_Scanner class to encapsulate the scanning functions to keep them portable
 *
 * @author: Thorsten Ott
 * @since: 0.7
 * @todo: get rules and hashes from external source in encrypted format to avoid manipulation and keep them up to date
 */
class Exploit_Scanner {
	var $_path = '';
	var $_init_path = '';
	var $_exploit_scanner_filename = 'exploit-scanner-v2.php';
	var $_prepared_patterns = array();
	var $_pattern_descriptions = array();
	var $patterns = array();
	var $_search_results = array();
	var $_whitelist_hits = array();
	var $inaccessible = array();

	var $file_size_limit = 50;
	
	var $scan_source = 'file';
	var $allowed_extensions = array();
	
	var $changed_core_files = array();
	var $skipped_core_files = array();
	var $all_core_files = array();
	
	var $filehashes = array();
	var $skip_files = array();
	
	var $skip_checks = array();
	
	var $display_severities = array( 'raw', 'blocker', 'severe', 'warning' );
	
	var $_severities = array( 'blocker', 'severe', 'warning', 'note' );
	
	/**
	 * Definition of scan groups and the functions they run 
	 */
	var $_possible_scans = array( 'file_scan' => array( 'hash_file_scan', 'file_permission_scan', 'file_scan' ), 'db_scan' => array ( 'db_scan_plugins', 'db_scan_options', 'db_scan_posts', 'db_scan_comments' ), 'info' => array( 'list_admins', 'get_serverinfo' ) );
	/**
	 * Better descriptions for each of the scans
	 */
	var $_scan_names = array( 'hash_file_scan' => 'MD5 Checksum Test', 'file_permission_scan' => 'Scan file permissions', 'file_scan' => 'Filesystem pattern scan', 'db_scan_plugins' => 'Database active plugins test', 'db_scan_options' => 'Database options scan', 'db_scan_posts' => 'Database post scan', 'db_scan_comments' => 'Database comment scan', 'list_admins' => 'Administrator List', 'get_serverinfo' => 'Basic server information' );
	var $memory_limit = '';
	
	var $php_user = '';
	
	function Exploit_Scanner( $path ) {
		$this->_path = $this->format_directory_name( $path );
		$this->_init_path = $this->_path;
		
		set_time_limit(300);
		
		/**
		 * Definition of restricted commands
		 * "command_name" => array( "level" => "severity as defined in $_severities", "note" => "Free text note describing the problem" )
		 */
		$this->restricted_commands = array(
									 // wordpress functions
									 //

									 "remove_filter" => array( "level" => "Warning", "note" => "Removing filters" ),
									 "remove_action" => array( "level" => "Warning", "note" => "Removing actions" ),
									 "add_filter" => array( "level" => "Note", "note" => "Altering filters" ),
									 "add_action" => array( "level" => "Note", "note" => "Altering actions" ),
									 
									 // filesystem functions
									 //

									 //"basename" => array( "level" => "Note", "note" => "Returns filename component of path" ),
									 "chgrp" => array( "level" => "Blocker", "note" => "Changes file group" ),
									 "chmod" => array( "level" => "Blocker", "note" => "Changes file mode" ),
									 "chown" => array( "level" => "Blocker", "note" => "Changes file owner" ),
									 "clearstatcache" => array( "level" => "Warning", "note" => "Clears file status cache" ),
									 "copy" => array( "level" => "Blocker", "note" => "Copies file" ),
									 "delete" => array( "level" => "Blocker", "note" => "See unlink or unset" ),
									 //"dirname" => array( "level" => "Warning", "note" => "Returns directory name component of path" ),
									 "disk_free_space" => array( "level" => "Warning", "note" => "Returns available space in directory" ),
									 "disk_total_space" => array( "level" => "Warning", "note" => "Returns the total size of a directory" ),
									 "diskfreespace" => array( "level" => "Warning", "note" => "Alias of disk_free_space" ),
									 "fclose" => array( "level" => "Warning", "note" => "Closes an open file pointer" ),
									 "feof" => array( "level" => "Warning", "note" => "Tests for end-of-file on a file pointer" ),
									 "fflush" => array( "level" => "Blocker", "note" => "Flushes the output to a file" ),
									 "fgetc" => array( "level" => "Severe", "note" => "Gets character from file pointer" ),
									 "fgetcsv" => array( "level" => "Severe", "note" => "Gets line from file pointer and parse for CSV fields" ),
									 "fgets" => array( "level" => "Severe", "note" => "Gets line from file pointer" ),
									 "fgetss" => array( "level" => "Severe", "note" => "Gets line from file pointer and strip HTML tags" ),
									 //"file_exists" => array( "level" => "Warning", "note" => "Checks whether a file or directory exists" ),
									 "file_get_contents" => array( "level" => "Severe", "note" => "Reads entire file into a string" ),
									 "file_put_contents" => array( "level" => "Blocker", "note" => "Write a string to a file" ),
									 "file" => array( "level" => "Severe", "note" => "Reads entire file into an array" ),
									 "fileatime" => array( "level" => "Warning", "note" => "Gets last access time of file" ),
									 "filectime" => array( "level" => "Warning", "note" => "Gets inode change time of file" ),
									 "filegroup" => array( "level" => "Warning", "note" => "Gets file group" ),
									 "fileinode" => array( "level" => "Warning", "note" => "Gets file inode" ),
									 "filemtime" => array( "level" => "Warning", "note" => "Gets file modification time" ),
									 "fileowner" => array( "level" => "Warning", "note" => "Gets file owner" ),
									 "fileperms" => array( "level" => "Warning", "note" => "Gets file permissions" ),
									 "filesize" => array( "level" => "Warning", "note" => "Gets file size" ),
									 "filetype" => array( "level" => "Warning", "note" => "Gets file type" ),
									 "flock" => array( "level" => "Warning", "note" => "Portable advisory file locking" ),
									 "fnmatch" => array( "level" => "Warning", "note" => "Match filename against a pattern" ),
									 "fopen" => array( "level" => "Blocker", "note" => "Opens file or URL" ),
									 "fpassthru" => array( "level" => "Severe", "note" => "Output all remaining data on a file pointer" ),
									 "fputcsv" => array( "level" => "Blocker", "note" => "Format line as CSV and write to file pointer" ),
									 "fputs" => array( "level" => "Blocker", "note" => "Alias of fwrite" ),
									 "fread" => array( "level" => "Severe", "note" => "Binary-safe file read" ),
									 "fscanf" => array( "level" => "Severe", "note" => "Parses input from a file according to a format" ),
									 "fseek" => array( "level" => "Severe", "note" => "Seeks on a file pointer" ),
									 "fstat" => array( "level" => "Warning", "note" => "Gets information about a file using an open file pointer" ),
									 "ftell" => array( "level" => "Warning", "note" => "Returns the current position of the file read/write pointer" ),
									 "ftruncate" => array( "level" => "Severe", "note" => "Truncates a file to a given length" ),
									 "fwrite" => array( "level" => "Blocker", "note" => "Binary-safe file write" ),
									 "glob" => array( "level" => "Warning", "note" => "Find pathnames matching a pattern" ),
									 "is_dir" => array( "level" => "Warning", "note" => "Tells whether the filename is a directory" ),
									 "is_executable" => array( "level" => "Warning", "note" => "Tells whether the filename is executable" ),
									 "is_file" => array( "level" => "Warning", "note" => "Tells whether the filename is a regular file" ),
									 "is_link" => array( "level" => "Warning", "note" => "Tells whether the filename is a symbolic link" ),
									 //"is_readable" => array( "level" => "Warning", "note" => "Tells whether the filename is readable" ),
									 "is_uploaded_file" => array( "level" => "Warning", "note" => "Tells whether the file was uploaded via HTTP POST" ),
									 "is_writable" => array( "level" => "Warning", "note" => "Tells whether the filename is writable" ),
									 "is_writeable" => array( "level" => "Warning", "note" => "Alias of is_writable" ),
									 "lchgrp" => array( "level" => "Blocker", "note" => "Changes group ownership of symlink" ),
									 "lchown" => array( "level" => "Blocker", "note" => "Changes user ownership of symlink" ),
									 "link" => array( "level" => "Blocker", "note" => "Create a hard link" ),
									 "linkinfo" => array( "level" => "Warning", "note" => "Gets information about a link" ),
									 "lstat" => array( "level" => "Warning", "note" => "Gives information about a file or symbolic link" ),
									 "mkdir" => array( "level" => "Blocker", "note" => "Makes directory" ),
									 "move_uploaded_file" => array( "level" => "Severe", "note" => "Moves an uploaded file to a new location" ),
									 "parse_ini_file" => array( "level" => "Severe", "note" => "Parse a configuration file" ),
									 "parse_ini_string" => array( "level" => "Severe", "note" => "Parse a configuration string" ),
									 "pathinfo" => array( "level" => "Warning", "note" => "Returns information about a file path" ),
									 "pclose" => array( "level" => "Warning", "note" => "Closes process file pointer" ),
									 "popen" => array( "level" => "Blocker", "note" => "Opens process file pointer" ),
									 "readfile" => array( "level" => "Severe", "note" => "Outputs a file" ),
									 "readlink" => array( "level" => "Severe", "note" => "Returns the target of a symbolic link" ),
									 "realpath" => array( "level" => "Severe", "note" => "Returns canonicalized absolute pathname" ),
									 "rename" => array( "level" => "Blocker", "note" => "Renames a file or directory" ),
									 "rewind" => array( "level" => "Warning", "note" => "Rewind the position of a file pointer" ),
									 "rmdir" => array( "level" => "Blocker", "note" => "Removes directory" ),
									 "set_file_buffer" => array( "level" => "Warning", "note" => "Alias of stream_set_write_buffer" ),
									 "stat" => array( "level" => "Warning", "note" => "Gives information about a file" ),
									 "symlink" => array( "level" => "Blocker", "note" => "Creates a symbolic link" ),
									 "tempnam" => array( "level" => "Severe", "note" => "Create file with unique file name" ),
									 "tmpfile" => array( "level" => "Blocker", "note" => "Creates a temporary file" ),
									 "touch" => array( "level" => "Blocker", "note" => "Sets access and modification time of file" ),
									 "umask" => array( "level" => "Blocker", "note" => "Changes the current umask" ),
									 "unlink" => array( "level" => "Blocker", "note" => "Deletes a file" ),

									 // process control functions
									 //
									 "pcntl_alarm" => array( "level" => "Blocker", "note" => "Set an alarm clock for delivery of a signal" ),
									 "pcntl_exec" => array( "level" => "Blocker", "note" => "Executes specified program in current process space" ),
									 "pcntl_fork" => array( "level" => "Blocker", "note" => "Forks the currently running process" ),
									 "pcntl_getpriority" => array( "level" => "Blocker", "note" => "Get the priority of any process" ),
									 "pcntl_setpriority" => array( "level" => "Blocker", "note" => "Change the priority of any process" ),
									 "pcntl_signal_dispatch" => array( "level" => "Blocker", "note" => "Calls signal handlers for pending signals" ),
									 "pcntl_signal" => array( "level" => "Blocker", "note" => "Installs a signal handler" ),
									 "pcntl_sigprocmask" => array( "level" => "Blocker", "note" => "Sets and retrieves blocked signals" ),
									 "pcntl_sigtimedwait" => array( "level" => "Blocker", "note" => "Waits for signals, with a timeout" ),
									 "pcntl_sigwaitinfo" => array( "level" => "Blocker", "note" => "Waits for signals" ),
									 "pcntl_wait" => array( "level" => "Blocker", "note" => "Waits on or returns the status of a forked child" ),
									 "pcntl_waitpid" => array( "level" => "Blocker", "note" => "Waits on or returns the status of a forked child" ),
									 "pcntl_wexitstatus" => array( "level" => "Blocker", "note" => "Returns the return code of a terminated child" ),
									 "pcntl_wifexited" => array( "level" => "Blocker", "note" => "Checks if status code represents a normal exit" ),
									 "pcntl_wifsignaled" => array( "level" => "Blocker", "note" => "Checks whether the status code represents a termination due to a signal" ),
									 "pcntl_wifstopped" => array( "level" => "Blocker", "note" => "Checks whether the child process is currently stopped" ),
									 "pcntl_wstopsig" => array( "level" => "Blocker", "note" => "Returns the signal which caused the child to stop" ),
									 "pcntl_wtermsig" => array( "level" => "Blocker", "note" => "Returns the signal which caused the child to terminate" ),
									 
									 // system functions
									 //
									"shell_exec" => array( "level" => "Blocker", "note" => "Executes a server command like ls, cd, wget, etc. This may be a script used by hackers." ), 
									"eval" => array( "level" => "Blocker", "note" => "Could be JavaScript code used to hide code inserted by a hacker." ),
									
									// other suspicious functions
									'base64_decode' => array( "level" => "Severe", "note" => "Often used by malicous scripts to decode previously encoded data, such as malicious URLs" ),
									 
									 );
		/**
		 * Definition of restricted patterns
		 * "preg_match pattern" => array( "level" => "severity as defined in $_severities", "note" => "Free text note describing the problem" )
		 */
		$this->restricted_patterns = array(
									 // Direct Database queries
									 "/(\\\$wpdb->|mysql_|WP_Query)+.+(ALTER)+\s+/msiU" => array( "level" => "Severe", "note" => "Possible database table alteration" ),
									 "/(\\\$wpdb->|mysql_|WP_Query)+.+(CREATE)+\s+/msiU" => array( "level" => "Severe", "note" => "Possible database table creation" ),
									 "/(\\\$wpdb->|mysql_|WP_Query)+.+(DROP)+\s+/msiU" => array( "level" => "Severe", "note" => "Possible database table deletion" ),
									 "/(\\\$wpdb->|mysql_|WP_Query)+.+(DELETE)+\s+(FROM)+\s+/msiU" => array( "level" => "Warning", "note" => "Direct database delete query" ),
									 "/(\\\$wpdb->|mysql_|WP_Query)+.+(UPDATE)+\s+/msiU" => array( "level" => "Warning", "note" => "Direct database update query" ),
									 "/(\\\$wpdb->|mysql_|WP_Query)+.+(SELECT)+\s.+/msiU" => array( "level" => "Note", "note" => "Direct Database select query" ),
									 "/(^GLOBAL)(\\\$wpdb->|mysql_|WP_Query)+/msiU" => array( "level" => "Note", "note" => "Possible direct database query" ), 
									 
									 // Output of variables
									 "/(echo|print|\<\?\=)+.+(\\\$GLOBALS|\\\$_SERVER|\\\$_GET|\\\$_REQUEST|\\\$_POST)+/msiU" => array( "level" => "Warning", "note" => "Possible output of restricted variables" ),
									 "/(echo|print|\<\?\=)+.+(get_search_query)+/msiU" => array( "level" => "Severe", "note" => "Output of search query" ),
									
									// Possible exploit patterns
									"/<iframe/msiU" => array( "level" => "Severe", "note" => "iframes can sometimes be used by hackers to load their own adverts and code on your site." ), 
									"/visibility:hidden/msiU" => array( "level" => "Warning", "note" => "CSS styling used to hide parts of a web page (can be used legitimately)" ), 
									"/display:none/msiU" => array( "level" => "Warning", "note" => "CSS styling used to hide parts of a web page (is often used legitimately, be concerned if it's used to hide a link)" ),
									"/display: none/msiU" => array( "level" => "Warning", "note" => "CSS styling used to hide parts of a web page (is often used legitimately, be concerned if it's used to hide a link)" ),
									"/ShellBOT/msiU" => array( "level" => "Blocker", "note" => "This may be a script used by hackers to get control of your server." ), 
									"/uname -a/msiU" => array( "level" => "Blocker", "note" => "Tells a hacker what operating system your server is running" ), 
									"/YW55cmVzdWx0cy5uZXQ=/msiU" => array( "level" => "Blocker", "note" => "Base64 encoded text found in PHP code that redirects visitors from Google." ), 
									"/eval\(/msiU" => array( "level" => "Severe", "note" => "Could be JavaScript code used to hide code inserted by a hacker." ), 
									"/String\.fromCharCode/msiU" => array( "level" => "Warning", "note" => "JavaScript code used to hide suspicious code, but can also be legitimate code." ), 
									"/\$_COOKIE\[\"yahg\"\]/msiU" => array( "level" => "Blocker", "note" => "YAHG Googlerank.info exploit code. See <a href='http://creativebriefing.com/wordpress-hacked-googlerankinfo/'>here</a> for further info." ),
									"/ekibastos/msiU" => array( "level" => "Blocker", "note" => "Possible Ekibastos attack. See <a href='http://ocaoimh.ie/did-your-wordpress-site-get-hacked/'>here</a> for more info." ),
									"/script language=\"JavaScript\"/msiU" => array( "level" => "Severe", "note" => "Could be JavaScript code used to hide code inserted by a hacker." ),
									"/eval\s*\(\s*base64_decode\s*\(/msiU" => array( "level" => "Blocker", "note" => "Most likely used by malicous scripts to decode previously encoded data and execute it" ),
									"/<!--\s*[A-Za-z0-9]+\s*--><\?php/msiU" => array( "level" => "Blocker", "note" => "Frequently used by Wordpress, MediaTemple, and an Injection Attack. See <a href='http://www.kyle-brady.com/2009/11/07/wordpress-mediatemple-and-an-injection-attack/'>here</a>" ),
									
									);
		/**
		 * Definition of whitelist patterns (patterns that need to be existing somewhere in the path)
		 * "preg_match pattern" => array( "level" => "severity as defined in $_severities", "note" => "Free text note describing the problem" )
		 */
		$this->whitelist_patterns = array(
									"/(wp_head)+\s?\(\)/msiU" => array( "level" => "Severe", "note" => "wp_head() call missing" ),
									"/(wp_footer)+\s?\(\)/msiU" => array( "level" => "Severe", "note" => "wp_footer() call missing" ),
									);
								
		/**
		 * Definition files that should be skipped
		 */
		$this->skip_files = array( 
									'.svn', // skip .svn directories
									str_replace( ABSPATH, '', basename( __FILE__ ) ), // skip the current file
								);
	}
	

	function format_directory_name( $dir ) {
		$dir = preg_split( '/\/+$/', $dir, -1, PREG_SPLIT_NO_EMPTY );
		return $dir[0];
	}

	function search_file_for_pattern( $file ) {
		if ( !is_readable( $file ) ) {
			if ( !isset( $this->inaccessible['files']['inaccessible'] ) || !in_array( $file, $this->inaccessible['files']['inaccessible'] ) ) {
				$this->inaccessible['files']['inaccessible'][] = $file;
			}
			return;
		}

		if ( !file( $file ) ) {
			if ( !isset( $this->inaccessible['files']['empty'] ) || !in_array( $file, $this->inaccessible['files']['empty'] ) ) {
				$this->inaccessible['files']['empty'][] = $file;
			}
			return;
		}
		
		if ( filesize( $file ) > ( (int) $this->file_size_limit * 1024 ) ) {
			$this->add_result( $file, '', '', '', 'file skipped due to filesize', 'Note', 'file_scan' );
			return;
		}
		
		if ( in_array( $file, $this->all_core_files ) && !in_array( $file, $this->changed_core_files ) ) {
			$this->add_result( $file, '', '', '', 'unmodified core file skipped', 'Note', 'file_scan' );
			return;
		}

		$file_lines = file( $file );
			foreach ( $this->_prepared_patterns as $pattern ) {
				foreach ( $file_lines as $line_number => $line_content ) {
					$line_content = trim( $line_content );
					if ( preg_match( $pattern,$line_content ) ) {
						if ( isset( $this->whitelist_patterns[ $pattern ] ) ) {
							$this->_whitelist_hits[$pattern]++;
						} else {
							$problem_description = $this->_pattern_descriptions[ $pattern ][ 'note' ];
							$problem_level = $this->_pattern_descriptions[ $pattern ][ 'level' ];
							// log result
							$this->add_result( $file, $line_content, $line_number+1, $pattern, $problem_description, $problem_level, $this->scan_source );
						}
					}
				}
			}
	}

	function scan_directory( $dir, $callback ) {
		$sub_dirs = array();
		$dir_files = array();
		if ( $handle = @opendir( $dir ) ) {
			while ( false !== ( $file = readdir( $handle ) ) ) {
				if ( $file != "." && $file != ".." && !in_array( $file, $this->skip_files ) ) {
					if ( is_dir( $dir . "/" . $file ) ) {
						$sub_dirs[] = $dir."/".$file;
					} elseif ( is_file( $dir . "/" . $file ) && $this->is_extension( $file ) ) {
						$dir_files[] = $dir."/".$file;
					} else {
						///neither file, nor directory >>> not interested.
					}
				}
			}
			closedir( $handle );
			foreach ( $dir_files as $file ) {
				if ( is_callable( array( $this, $callback ) ) )
					call_user_func( array( $this, $callback ), $file );
			}
			if ( count( $sub_dirs ) > 0) {
				foreach ( $sub_dirs as $sub_dir ) {
					$this->scan_directory( $sub_dir, $callback );
				}
			}
		} else {
			if ( !isset( $this->inaccessible['dirs']['inaccessible'] ) || !in_array( $dir,$this->inaccessible['dirs']['inaccessible'] ) ) {
				$this->inaccessible['dirs']['inaccessible'][] = $dir;
			}
		}

	}

	function is_extension($file) {
		if ( empty( $this->allowed_extensions ) )
			return true;
			
		$file_ext = array_pop( explode( ".",$file ) );
		if ( in_array( $file_ext, $this->allowed_extensions ) ) {
			return true;
		}
		return false;
	}

	function prepare_patterns() {
		if ( ! empty( $this->restricted_patterns ) ) {
			foreach ( $this->restricted_patterns as $pattern => $data ) {
				$this->_prepared_patterns[] = $pattern;
				$this->_pattern_descriptions[ $pattern ] = $data;
			}
		}
		if ( ! empty( $this->whitelist_patterns ) ) {
			foreach ( $this->whitelist_patterns as $pattern => $data ) {
				$this->_prepared_patterns[] = $pattern;
				$this->_pattern_descriptions[ $pattern ] = $data;
			}
		}

		if ( ! empty( $this->restricted_commands ) ) {
			foreach ( $this->restricted_commands as $command => $data) {
				$cmd_pattern = "/\s+($command)+\s?\(+[\$|\'|\"]+/msiU";
				$this->_prepared_patterns[] = $cmd_pattern;
				$this->_pattern_descriptions[ $cmd_pattern ] = $data;
			}
		}
	}

	function run( $scans=array() ) {
		if ( !empty( $this->memory_limit ) )
			@ini_set( 'memory_limit', (int) $this->memory_limit . 'M' );
			
		$this->prepare_patterns();
		if ( empty( $scans ) || !is_array( $scans ) )
			$this->add_result( '', '', '', '', 'You did not select any scans. Please select at least one scan to execute.', 'Blocker', 'run' );
			
		foreach ( (array) $this->_possible_scans as $group => $scan_types ) {
			if ( in_array( $group, $scans ) ) {
				foreach ( (array) $scan_types as $scan ) {
					if ( in_array( $scan, $this->skip_checks ) )
						continue;
					if ( is_callable( array( &$this, $scan ) ) )
						call_user_func( array( &$this, $scan ) );
				}
			}
		}
	}
	
	function hash_file_scan() {
		global $wp_version;
							
		$this->scan_source = 'hash_file_scan';
	
		unset( $filehashes );
		$hashes = dirname(__FILE__) . '/hashes-'. $wp_version .'.php';
		if ( file_exists( $hashes ) ) {
			include_once( $hashes );
		} else {
			$this->add_result( $hashes, '', '', '', 'The file containing the checksums of all the core WordPress files appears to be missing. Either you have upgraded WordPress and this plugin hasn\'t been updated with the new hashes or the file has been deleted/renamed. You will find that a lot more files have been returned in the Suspicious Strings section.', 'Blocker', 'hash_file_scan' );
			return;
		}
		
		if ( !empty( $filehashes ) ) {
			$this->filehashes = $filehashes;
		} else {
			$this->add_result( $hashes, '', '', '', 'The file containing the checksums of all the core WordPress files appears to be corrupt and does not include any hash values.', 'Blocker', 'hash_file_scan' );
			return;
		}
		if ( is_file( $this->_path ) ) {
			// run search on the file
			$this->verify_hash( $this->_path );
		} elseif ( is_dir( $this->_path ) ) {
			// scan directory contents for string
			$this->scan_directory($this->_path, 'verify_hash');
		}
		
		$this->_path = $this->_init_path;
	}
	
	function file_permission_scan() {
		global $wp_version;
		
		$this->php_user = trim( @exec( 'whoami' ) );
		// most likely an error
		if ( !empty( $this->php_user ) && count( split(" ", $this->php_user ) ) > 1 )
			$this->php_user = '';
		
							
		$this->scan_source = 'file_permission_scan';
	
		if ( is_file( $this->_path ) ) {
			// run search on the file
			$this->verify_permissions( $this->_path );
		} elseif ( is_dir( $this->_path ) ) {
			// scan directory contents for string
			$this->scan_directory( $this->_path, 'verify_permissions' );
		}
		
		$this->_path = $this->_init_path;
	}

	function file_scan() {
		$this->scan_source = 'file_scan';

		if ( is_file( $this->_path ) ) {
			// run search on the file
			$this->search_file_for_pattern( $this->_path );
		} elseif ( is_dir( $this->_path ) ) {
			// scan directory contents for string
			$this->scan_directory( $this->_path, 'search_file_for_pattern' );
		}

		if ( ! empty( $this->whitelist_patterns ) ) {
			foreach ( $this->whitelist_patterns as $pattern => $data ) {
				if ( !isset( $this->_whitelist_hits[$pattern] ) )
					$this->add_result( '', '', '', $pattern, $data['note'], $data['level'], $this->scan_source );
			}
		}
		
		$this->_path = $this->_init_path;
	}
	
	function db_scan_plugins() {
		global $wpdb;
		$this->scan_source = 'db_scan_plugins';
		
		// Suspicious Plugins
		$active_plugins = get_option( 'active_plugins' );
		if ( is_array( $active_plugins ) && !empty( $active_plugins ) ) {
			$suspect_plugins = array();
			foreach ( $active_plugins as $plugin ) {
				if ( strpos( $plugin, '..' ) !== false || substr( $plugin, -4 ) != '.php' ) {
					$suspect_plugins[] = $plugin;
				}
			}
			if ( !empty( $suspect_plugins ) ) {
				foreach ( $suspect_plugins as $plugin ) {
					if ( $plugin == '' )
						$this->add_result( '', '', '', '', 'Blank entry found. Should be removed. It will look like \'i:0;s:0:\"\";\' in the active_records field.', 'Blocker', $this->scan_source );
				}
			}
		}
	}
	
	function db_scan_options() {
		global $wpdb;
		$this->scan_source = 'db_scan_options';
		
		$options = $wpdb->get_results( "SELECT option_name, option_value FROM {$wpdb->options}" );
		if ( !$options ) {
			$this->add_result('', '', '', '', 'No options found, that\'s odd.', 'Blocker', $this->scan_source);
			return;
		}
		
		foreach ( $this->_prepared_patterns as $pattern ) {
				foreach ( $options as $option ) {
					$value = $option->option_value;
					$key = $option->option_name;
					if ( preg_match( $pattern, $value ) ) {
						if ( isset( $this->whitelist_patterns[ $pattern ] ) ) {
							$this->_whitelist_hits[$pattern]++;
						} else {
							$problem_description = $this->_pattern_descriptions[ $pattern ][ 'note' ];
							$problem_level = $this->_pattern_descriptions[ $pattern ][ 'level' ];
							// log result
							$this->add_result( $key, $value, $key, $pattern, $problem_description, $problem_level, $this->scan_source );
						}
					}
				}
			}
		unset( $options );
		return;
	}
	
	function db_scan_posts() {
		global $wpdb;
		set_time_limit(0);
		$this->scan_source = 'db_scan_posts';
		
		$post_count = $wpdb->get_var( "SELECT count(*) FROM {$wpdb->posts} WHERE post_type<>'revision'" );
		if ( !$post_count || 0 == $post_count ) {
			$this->add_result( '', '', '', '', 'No posts found, that\'s odd.', 'Blocker', $this->scan_source );
			return;
		}
		$start = 0;
		$max = 50; // run always 50 posts at once in order to keep memory kinda empty
		$end = $limit;
		
		while ( $end < $post_count ) {
			$end = $start+$max;
			$limit = " LIMIT $start, $max";
			$start = $end;
			$posts = $wpdb->get_results( "SELECT ID, post_title, concat_ws(' ',  post_title, post_content, post_excerpt) as content FROM {$wpdb->posts} WHERE post_type<>'revision' $limit" );
			

			foreach ( $this->_prepared_patterns as $pattern ) {
					foreach ( $posts as $post ) {
						if ( preg_match( $pattern, $post->content ) ) {
							if ( isset( $this->whitelist_patterns[ $pattern ] ) ) {
								$this->_whitelist_hits[$pattern]++;
							} else {
								$problem_description = $this->_pattern_descriptions[ $pattern ][ 'note' ];
								$problem_level = $this->_pattern_descriptions[ $pattern ][ 'level' ];
								// log result
								$this->add_result( $post->ID, $post->content, $post->post_title, $pattern, $problem_description, $problem_level, $this->scan_source );
							}
						}
					}
				}
			unset( $posts );
		}
		return;
	}
	
	function db_scan_comments() {
		global $wpdb;
		set_time_limit(0);
		$this->scan_source = 'db_scan_comments';
		
		$comment_count = $wpdb->get_var( "SELECT count(*) FROM {$wpdb->comments}" );
		if ( !$comment_count || 0 == $comment_count ) {
			$this->add_result('', '', '', '', 'No comments found, that\'s odd.', 'Blocker', $this->scan_source);
			return;
		}
		$start = 0;
		$max = 100; // run always 100 comments at once in order to keep memory kinda empty
		$end = $limit;
		
		while ( $end < $comment_count ) {
			$end = $start+$max;
			$limit = " LIMIT $start, $max";
			$start = $end;
			$comments = $wpdb->get_results( "SELECT comment_ID, comment_content, comment_author FROM {$wpdb->comments} $limit" );
			foreach ( $this->_prepared_patterns as $pattern ) {
					foreach ( $comments as $comment ) {
						if ( preg_match( $pattern, $comment->comment_content ) ) {
							if ( isset( $this->whitelist_patterns[ $pattern ] ) ) {
								$this->_whitelist_hits[$pattern]++;
							} else {
								$problem_description = $this->_pattern_descriptions[ $pattern ][ 'note' ];
								$problem_level = $this->_pattern_descriptions[ $pattern ][ 'level' ];
								// log result
								$this->add_result( $comment->comment_ID, $comment->comment_content, $comment->comment_author, $pattern, $problem_description, $problem_level, $this->scan_source );
							}
						}
					}
				}
			unset( $comments );
		}
		return;
	}
	
	function list_admins() {
		global $wpdb;
		$this->scan_source = 'list_admins';
		
		// List all administrators 
		ob_start();
		?>
		<table class="widefat fixed" style="margin-bottom: 2em;">
			<thead>
				<tr>
					<th scope="col" style="width: 5%">ID</th>
					<th scope="col">Username</th>
					<th scope="col">Name</th>
					<th scope="col">Email</th>
				</tr>
			</thead>
			<tbody>
		<?php	
		
		$sort_users = 'user_nicename';
		$user_ids = $wpdb->get_col( $wpdb->prepare( "SELECT $wpdb->users.ID FROM $wpdb->users ORDER BY %s ASC", $sort_users ) );
		
		foreach ( $user_ids as $id ) {
			$user = get_userdata( $id );
			if ( $user->user_level == '10' ) {
				echo '<tr><td>' . $user->ID . '</td><td>' . $user->user_login . '</td><td>';
				if ( isset( $user->last_name ) && isset( $user->first_name ) ) {
					echo $user->first_name . ' ' . $user->last_name;
				}
				echo '</td><td>' . $user->user_email . '</td></tr>';
			}
		} ?>
			</tbody>
		</table>
		<?php
		$list = ob_get_clean();
		$this->add_result('', $list, '', '', '', 'raw', $this->scan_source);
	}
	
	function get_serverinfo() {
		global $wpdb;
		$this->scan_source = 'get_serverinfo';

		$info['sqlversion'] = $wpdb->get_var( "SELECT VERSION() AS version" );
		$mysqlinfo = $wpdb->get_results( "SHOW VARIABLES LIKE 'sql_mode'" );
		if ( is_array( $mysqlinfo ) ) 
			$info['sql_mode'] = $mysqlinfo[0]->Value;

		$ini_vars = array( 'safe_mode', 'allow_url_fopen', 'upload_max_filesize', 'post_max_size', 'max_execution_time', 'memory_limit' );
		foreach ( $ini_vars as $var ) {
			if ( $val = ini_get( $var ) ) 
				$info[$var] = $val;
			else 
				$info[$var] = ( $var === false) ? 'off' : 'n/a';
		}

		if ( function_exists( 'memory_get_usage' ) ) 
			$info['memory_usage'] = round( memory_get_usage() / 1024 / 1024, 2) . __(' MByte');

		ob_start();
		?>
		<table class="widefat fixed" style="margin-bottom: 2em;">
			<thead>
				<tr>
					<th scope="col">Setting</th>
					<th scope="col">Value</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
		<?php
		foreach ( $info as $var => $value ) {
			if ( isset( $info_desc[$var] ) )
				$description = $info_desc[$var];
			else
				$description = 'n/a';
			echo '<tr><td>' . $var . '</td><td>' . $value . '</td><td>' . $description . '</td></tr>';
		} ?>
			</tbody>
		</table>
		<?php
		$list = ob_get_clean();
		$this->add_result('', $list, '', '', '', 'raw', $this->scan_source);
	}


	
	function verify_hash( $file ) {
		$filename = str_replace( ABSPATH, '', $file ); 
		if ( filesize( $file ) > ( (int) $this->file_size_limit * 1024 ) ) {
			if ( isset( $this->filehashes[$filename] ) ) {
				$this->add_result( $file, '', '', '', 'core file skipped due to filesize', 'Warning', 'hash_file_scan' );
				$this->skipped_core_files[] = $file;
			} else {
				$this->add_result( $file, '', '', '', 'file skipped due to filesize', 'Warning', 'hash_file_scan' );
			}
		}

		$md5 = md5_file( $file );
		if ( isset( $this->filehashes[$filename] ) )
			$this->all_core_files[] = $file;
			
		if ( isset( $this->filehashes[$filename] ) && $md5 != $this->filehashes[$filename] ) {
			$this->add_result( $file, '', '', '', 'altered core file', 'Blocker', 'hash_file_scan' );
			$this->changed_core_files[] = $file;
		}
	}
	
	function verify_permissions( $file ) {
		$filename = str_replace( ABSPATH, '', $file ); 

		$fileinfo = $this->power_stat( $file );
		if ( !$fileinfo ) {
			$this->add_result($file, '', '', '', 'Could not gather information about this file', 'Severe', $this->scan_source);
			return;
		}
		
		$apache_file = $is_writable = $is_executable = $changed_last_day = $root_file = false;
		
		if ( !empty( $this->php_user ) && $fileinfo['owner']['owner']['name'] == $this->php_user )
			$apache_file = true;
		
		if ( $fileinfo['filetype']['is_writable'] == 1 )
			$is_writable = true;
			
		if ( $fileinfo['filetype']['is_executable'] == 1 )
			$is_executable = true;		
			
		if ( time() - $fileinfo['time']['mtime'] < 86400 )
			$changed_last_day = true;
			
		if ( 'root' == $fileinfo['owner']['owner']['name'] || 0 == $fileinfo['owner']['fileowner'] || 0 == $fileinfo['owner']['filegroup'] ) {
			$root_file = true;
		}
		
		if ( 'wp-config.php' == $filename && $is_writable )
			$this->add_result($file, '', '', '', 'Config file is writable (' . $fileinfo['perms']['human'] . ')', 'Blocker', $this->scan_source);
		else if ( in_array( $file, $this->all_core_files ) && $apache_file && !$is_writable )
			$this->add_result($file, '', '', '', 'Core file owned by apache user ' . $this->php_user . ' (' . $fileinfo['perms']['human'] . ')', 'Warning', $this->scan_source);
		else if ( in_array( $file, $this->all_core_files ) && $apache_file && $is_writable )
			$this->add_result($file, '', '', '', 'Core file owned by apache user ' . $this->php_user . ' and writable (' . $fileinfo['perms']['human'] . ')', 'Severe', $this->scan_source);
		else if ( $apache_file && $is_writable ) 
			$this->add_result($file, '', '', '', 'File owned by apache user ' . $this->php_user . ' and writable (' . $fileinfo['perms']['human'] . ')', 'Warning', $this->scan_source);
			
		if ( $changed_last_day )
			$this->add_result($file, '', '', '', 'File changed in last 24 hours', 'Note', $this->scan_source);
	}
	
	function add_result( $file_path, $line_contents, $line_number,$pattern, $problem_description, $problem_level, $scan_source = 'file' ) {
		$this->_search_results[] = array(
						 'file_path' => $file_path,
						 'line_contents' => $line_contents,
						 'line_number' => $line_number,
						 'pattern' => $pattern, 
						 'problem_description' => $problem_description,
						 'problem_level' => $problem_level,
						 'scan_source' => $scan_source,
			);
	}

	function get_search_results( $type = '' ) {
		switch( $type ) {
			case 'raw';
			case 'blocker':
			case 'severe':
			case 'warning':
			case 'note':
				$resultset = array();
				reset( $this->_search_results );
				foreach ( $this->_search_results AS $result ) {
					if ( $type == strtolower( $result['problem_level'] ) )
						$resultset[] = $result;				   
				}
				return $resultset;
				break;
			case 'hash_file_scan':
			case 'file_permission_scan':
			case 'file_scan':
			case 'db_scan_plugins':
			case 'db_scan_options':
			case 'db_scan_posts':
			case 'db_scan_comments':
			case 'list_admins':
			case 'get_serverinfo':
				$resultset = array();
				reset( $this->_search_results );
				foreach ( $this->_search_results AS $result ) {
					if ( $type == strtolower( $result['scan_source'] ) )
						$resultset[] = $result;				   
				}
				return $resultset;
				break;
			default:
				return $this->_search_results;
				break;
		}
		return $this->_search_results;
	}

	function get_inaccessible() {
		return $this->inaccessible;
	}

	function get_results() {
		return $this->_search_results;
	}

	function get_path() {
		return $this->_path;
	}

	function get_html_result() {
		$html_result = "<hr/><h3>Results for path " . $this->get_path() . "</h3>\n";
		foreach ( $this->display_severities as $level ) {
			if ( !in_array( $level, $this->_severities ) && 'raw' != $level )
				continue;
				
			$result = $this->get_search_results( $level );
			if ( 'raw' == $level && !empty( $result ) )
				$html_result .= $this->_draw_raw( $result );		
			/*else if ( !empty( $result ) ) {
				$html_result .= "<h4>Results with impact level " . $level . "</h4><ul>\n";
				$html_result .= $this->_drawRows( $result ) . "\n";
				$html_result .= "</ul>\n";
			}*/
			else if ( !empty( $result ) ) {
				$html_result .= "<h4>Results with impact level " . $level . "</h4><ul>\n";
				$html_result .= $this->_draw_table_rows( $result ) . "\n";
				$html_result .= "</ul>\n";
			}
		}
		return $html_result;
	}

	function _draw_raw( $data ) {
		$result = '';
		foreach ( $data as $row ) {
			if ( isset( $this->_scan_names[$row['scan_source']] ) )
				$scan_description = $this->_scan_names[$row['scan_source']];
			else 
				$scan_description = $row['scan_source'];
			$result.= "<h4>$scan_description</h4>";
			$result.= $row['line_contents'];
		}
		return $result;
	}
	
	function _draw_table_rows( $data ) {
		$result = '
			<table class="widefat fixed" style="margin-bottom: 2em;">
			<thead>
				<tr>
					<th scope="col" style="width:75px;">Severity</th>
					<th scope="col">Impact category</th>
					<th scope="col">Description</th>
					<th scope="col">File/Dataset</th>
				</tr>
			</thead>
			<tbody>
		';
		foreach ( $data as $row ) {
			if ( 'db_scan_posts' == $row['scan_source'] )
				$line = "<strong>Post:</strong> <a href='post.php?action=edit&amp;post=" . $row['file_path'] . "' title='Edit this post'>" . $row['line_number'] . "</a>";
			else if ( 'db_scan_comments' == $row['scan_source'] )
				$line = "<strong>Comment from:</strong> <a href='comment.php?action=editcomment&amp;c=" . $row['file_path'] . "' title='Edit this comment'>" . $row['line_number'] . "</a>";
			else if ( !empty( $row['line_number'] ) )	
				$line = str_replace( ABSPATH, '[ABSPATH]/', $row['file_path'] ) . ":" . $row['line_number'];
			else 
				$line = str_replace( ABSPATH, '[ABSPATH]/', $row['file_path'] );
					
			switch( strtolower( $row['problem_level'] ) ) {
				case "blocker":
					$color = "#f00";
					break;
				case "severe":
					$color = "#f0d";
					break;
				case "warning":
					$color = "#ff0";
					break;
				case "note":
					$color = "#0f0";
					break;
			}	
		
			$out_line = '';
			if ( ":" != $line && !empty( $line ) )
				$out_line = "$line";
			else
				$row['line_contents'] = $row['pattern'];
			
			if ( isset( $this->_scan_names[$row['scan_source']] ) )
				$scan_description = $this->_scan_names[$row['scan_source']];
			else 
				$scan_description = $row['scan_source'];
				
			$result .= sprintf( '<tr><td style="width:75px;"><span style="background:#000;color:%s;font-weight:bold;">%s</span></td><td>%s</td><td>%s</td><td>%s</td></tr>',
								$color, $row['problem_level'], $scan_description, $row['problem_description'], $out_line);
			
			if ( !empty( $row['line_contents'] ) )					
				$result .= sprintf( '<tr><td>Context</td><td colspan="3"><div>%s</div></td></tr>', $this->hilight_text( $row['line_contents'], $row['pattern'] ) );
		}
							
		$result .= '
			</tbody>
			</table>
		';
		
		return $result;
	}
	
	function _drawRows( $data ) {
		$result = '';
		foreach ( $data as $row ) {
			if ( 'db_scan_posts' == $row['scan_source'] )
				$line = "<strong>Post:</strong> <a href='post.php?action=edit&amp;post=" . $row['file_path'] . "' title='Edit this post'>" . $row['line_number'] . "</a>";
			else if ( 'db_scan_comments' == $row['scan_source'] )
				$line = "<strong>Comment from:</strong> <a href='comment.php?action=editcomment&amp;c=" . $row['file_path'] . "' title='Edit this comment'>" . $row['line_number'] . "</a>";
			else	
				$line = $row['file_path'] . ":" . $row['line_number'];
			switch( strtolower( $row['problem_level'] ) ) {
				case "blocker":
					$color = "#f00";
					break;
				case "severe":
					$color = "#f0d";
					break;
				case "warning":
					$color = "#ff0";
					break;
				case "note":
					$color = "#0f0";
					break;
			}	
		
			$out_line = '';
			if ( ":" != $line )
				$out_line = "($line)";
			else
				$row['line_contents'] = $row['pattern'];
			
			if ( isset( $this->_scan_names[$row['scan_source']] ) )
				$scan_description = $this->_scan_names[$row['scan_source']];
			else 
				$scan_description = $row['scan_source'];
				
			$result .= sprintf( '<li><span style="background:#000;color:%s;font-weight:bold;margin-right:10px;">%s</span><em>(%s)</em> &nbsp; %s %s<div>%s</div></li>',
								$color, $row['problem_level'], $scan_description, $row['problem_description'], $out_line, $this->hilight_text( $row['line_contents'], $row['pattern'] )
								);
		}
		return $result;
	}
	
	
	function hilight_text( $contents, $pattern ) {
		$out = '';
		if ( !empty($pattern) && preg_match( $pattern, $contents, $matches ) ) {
			$text = $matches[0];
		} else {
			if ( !empty( $contents ) )
				$out.= '<p><code>' . nl2br( wp_specialchars( substr( $contents, 0, 300 ) ) ) . '</code></p>';
			return $out;
		}
		while ( $contents ) {
			$start = strpos( $contents, $text ) - 50;
			if ( $start < 0 )
				$start = 0;
			$contents = substr( $contents, $start );
			$out.= '<p><code>' . nl2br( substr( str_replace( wp_specialchars( $text ), '<span style="background: #ff0;">' . wp_specialchars( $text ) . '</span>', wp_specialchars( $contents ) ), 0, 300 ) ) . '</code></p>';
			$contents = substr( $contents, strpos( $contents, $text ) + strlen( $text ) );
			if ( strpos( $contents, $text ) === false ) {
				$contents = false;
			}
		}
		
		return $out;
	}
	
	
	function power_stat( $file ) {
		clearstatcache();
		$ss=@stat($file);
		if ( !$ss ) 
			return false; //Couldnt stat file
		
		$ts=array(
			0140000=>'ssocket',
			0120000=>'llink',
			0100000=>'-file',
			0060000=>'bblock',
			0040000=>'ddir',
			0020000=>'cchar',
			0010000=>'pfifo'
		);
		
		$p=$ss['mode'];
		$t=decoct($ss['mode'] & 0170000); // File Encoding Bit
		
		$str =(array_key_exists(octdec($t),$ts))?$ts[octdec($t)]{0}:'u';
		$str.=(($p&0x0100)?'r':'-').(($p&0x0080)?'w':'-');
		$str.=(($p&0x0040)?(($p&0x0800)?'s':'x'):(($p&0x0800)?'S':'-'));
		$str.=(($p&0x0020)?'r':'-').(($p&0x0010)?'w':'-');
		$str.=(($p&0x0008)?(($p&0x0400)?'s':'x'):(($p&0x0400)?'S':'-'));
		$str.=(($p&0x0004)?'r':'-').(($p&0x0002)?'w':'-');
		$str.=(($p&0x0001)?(($p&0x0200)?'t':'x'):(($p&0x0200)?'T':'-'));
		
		$s=array(
			'perms'=>array(
				'umask'=>sprintf("%04o",@umask()),
				'human'=>$str,
				'octal1'=>sprintf("%o", ($ss['mode'] & 000777)),
			),	
			'owner'=>array(
				'fileowner'=>$ss['uid'],
				'filegroup'=>$ss['gid'],
			'owner'=>
				(function_exists('posix_getpwuid'))?
				@posix_getpwuid($ss['uid']):'',
			'group'=>
				(function_exists('posix_getgrgid'))?
				@posix_getgrgid($ss['gid']):''
		),
		
		'file'=>array(
			'filename'=>$file,
			'realpath'=>(@realpath($file) != $file) ? @realpath($file) : '',
			'dirname'=>@dirname($file),
			'basename'=>@basename($file)
		),
		
		'filetype'=>array(
			'type'=>substr($ts[octdec($t)],1),
			'type_octal'=>sprintf("%07o", octdec($t)),
			'is_file'=>@is_file($file),
			'is_dir'=>@is_dir($file),
			'is_link'=>@is_link($file),
			'is_readable'=> @is_readable($file),
			'is_writable'=> @is_writable($file),
			'is_executable'=> @is_executable($file)

		),
				
		'size'=>array(
			'size'=>$ss['size'], //Size of file, in bytes.
			'blocks'=>$ss['blocks'], //Number 512-byte blocks allocated
			'block_size'=> $ss['blksize'] //Optimal block size for I/O.
		),
		
		'time'=>array(
			'mtime'=>$ss['mtime'], //Time of last modification
			'atime'=>$ss['atime'], //Time of last access.
			'ctime'=>$ss['ctime'], //Time of last status change
			'accessed'=>@date('Y M D H:i:s',$ss['atime']),
			'modified'=>@date('Y M D H:i:s',$ss['mtime']),
			'created'=>@date('Y M D H:i:s',$ss['ctime'])
		),
		);
		
		clearstatcache();
		return $s;
	}

}

function exploit_scanner_scripts() {
	wp_enqueue_script( 'jquery-form' );
}
add_action( 'wp_print_scripts', 'exploit_scanner_scripts');

function exploitscanner_menu() {
	add_submenu_page('index.php', 'Exploit Scanner', 'Exploit Scanner', 'manage_options', 'exploit-admin-page', 'exploit_admin_page');
}
add_action('admin_menu', 'exploitscanner_menu');

add_action('wp_ajax_get_exploitscanner_results_all', 'exploitscanner_ajax_action_all');
function exploitscanner_ajax_action_all() {
	global $wp_version;
	check_admin_referer( 'exploitscanner-scan_all' );
	$scanner = new Exploit_Scanner( ABSPATH );
	$scanner->skip_checks = ( empty( $_POST['skip_checks'] ) ) ? array() : $_POST['skip_checks'];
	$scanner->file_size_limit = ( empty( $_POST['filesize_limit'] ) ) ? 400 : (int) $_POST['filesize_limit'];
	$scanner->memory_limit = ( empty( $_POST['memory_limit'] ) ) ? '' : (int) $_POST['memory_limit'];
	$scanner->display_severities = ( empty( $_POST['show'] ) ) ? $scanner->display_severities : (array) $_POST['show'];
	array_push( $scanner->display_severities, 'raw' );
	$scanner->run( $_POST['scans'] );
	die( $scanner->get_html_result() );
}

add_action('wp_ajax_get_exploitscanner_results_custom', 'exploitscanner_ajax_action_custom');
function exploitscanner_ajax_action_custom() {
	global $wp_version;
	check_admin_referer( 'exploitscanner-scan_customstrings' );
	$strings = explode( ',', $_GET['customscan'] );
	$scanner = new Exploit_Scanner( ABSPATH );
	$scanner->restricted_commands = array();
	$scanner->whitelist_patterns = array();
	$scanner->restricted_patterns = array();
	$scanner->skip_checks = ( empty( $_POST['skip_checks'] ) ) ? array( 'verify_permissions' ) : $_POST['skip_checks'];
	$scanner->display_severities = array('raw','blocker');
	foreach ( (array) $strings as $string ) {
		$scanner->restricted_patterns[ "|" . preg_quote($string) . "|msiU" ] = array( "level" => "Blocker", "note" => "Found string " . esc_html($string) );
	} 
	$scanner->file_size_limit = ( empty( $_POST['filesize_limit'] ) ) ? 400 : (int) $_POST['filesize_limit'];
	$scanner->memory_limit = ( empty( $_POST['memory_limit'] ) ) ? '' : (int) $_POST['memory_limit'];
	$scanner->run( array( 'file_scan', 'db_scan' ) );
	die( $scanner->get_html_result() );
}

function exploit_admin_page() { 
	global $wp_version ?>
	<div class="wrap">
		<h2>WordPress Exploit Scanner</h2>
		<?php
		$scan_url = '?page=exploit-admin-page&scan=all';
		$scan_action = 'exploitscanner-scan_all';
		$scan_link = wp_nonce_url( $scan_url, $scan_action );
		?>
		
		<h3>Exploit scan</h3>
		<p>This script searches through your WordPress install for signs that may indicate that your website has been compromised by hackers. It does <strong>NOT</strong> remove anything, this is left for the user to do.</p>
		<form action='?page=exploit-admin-page&scan=all' id="exploit_scan" method='POST'>
		<input type="hidden" name="action" value="get_exploitscanner_results_all">
		<table>
		<tr><td>Scans to execute:</td><td>General Infos <input type='checkbox' name='scans[]' value='info' <?php if ( empty( $_POST ) || in_array( 'info', $_POST['scans'] ) ) echo 'checked="checked"'; ?>/> &nbsp; File scan <input type='checkbox' name='scans[]' value='file_scan' <?php if ( empty( $_POST ) || in_array( 'file_scan', $_POST['scans'] ) ) echo 'checked="checked"'; ?>/> &nbsp; Database scan <input type='checkbox' name='scans[]' value='db_scan' <?php if ( empty( $_POST ) || in_array( 'db_scan', $_POST['scans'] ) ) echo 'checked="checked"'; ?>/></td></tr>
		<tr><td>Severities to show:</td><td> Blocker <input type='checkbox' name='show[]' value='blocker' <?php if ( empty( $_POST ) || in_array( 'blocker', $_POST['show'] ) ) echo 'checked="checked"'; ?>/> &nbsp; Severe <input type='checkbox' name='show[]' value='severe' <?php if ( empty( $_POST ) || in_array( 'severe', $_POST['show'] ) ) echo 'checked="checked"'; ?>/> &nbsp; Warning <input type='checkbox' name='show[]' value='warning' <?php if ( empty( $_POST ) || in_array( 'warning', $_POST['show'] ) ) echo 'checked="checked"'; ?>/> &nbsp; Note <input type='checkbox' name='show[]' value='note' <?php if ( in_array( 'note', $_POST['show'] ) ) echo 'checked="checked"'; ?>/></td></tr>
		<tr><td>Skip check:</td><td> File permission scan <input type='checkbox' name='skip_checks[]' value='file_permission_scan' <?php if ( empty( $_POST ) || in_array( 'file_permission_scan', $_POST['skip_checks'] ) ) echo 'checked="checked"'; ?> /></td></tr>
		<tr><td>PHP Memory Limit:</td><td> <input type='text' size='3' name='memory_limit' value='<?php echo $_POST['memory_limit'] ? $_POST['memory_limit'] : 128; ?>'/>MB (Max memory used by PHP.)</td></tr>
		<tr><td>Upper File size Limit:</td><td> <input type='text' size='3' name='filesize_limit' value='<?php echo $_POST['filesize_limit'] ? $_POST['filesize_limit'] : 400; ?>' />KB (Skip files larger than this. Skipped files are listed at the end of scan.)</td></tr>
		</table>
		<?php wp_nonce_field( 'exploitscanner-scan_all' ); ?>
		<input type='submit' class="button exploit-scan-button" value='Run the Scan' />
		</form>
		<p>If you run into memory problems, increase the PHP memory limit or reduce the file size limit.</p>
		<div style='margin-top: 20px;'>
		<h3>Custom search</h3>
		<p>You can also search the files and database on your site for a custom string:</p>
		<form method="get" id="exploit_scan_custom">
			<input type="hidden" name="action" value="get_exploitscanner_results_custom">
			<input type="hidden" name="page" value="exploit-admin-page" />
			<input type="text" name="customscan" class="regular-text code" value="<?php echo $_POST['customscan']; ?>" />
			<?php wp_nonce_field( 'exploitscanner-scan_customstrings' ); ?>
			<input type="submit" class="button exploit-scan-button" value="Search Files" />
		</form>
		</div>
		<script type="text/javascript">
			jQuery(document).ready(function($){
				var options = { 
					url:   '<?php echo admin_url("admin-ajax.php"); ?>',
        			target:        '#output1',   // target element(s) to be updated with server response 
        			beforeSubmit:  showRequest,  // pre-submit callback 
        			success:       showResponse,
				};
				
				var options2 = { 
					url:   '<?php echo admin_url("admin-ajax.php"); ?>',
        			target:        '#output1',   // target element(s) to be updated with server response 
        			beforeSubmit:  showRequest,  // pre-submit callback 
        			success:       showResponse,
				};
				
				jQuery('#exploit_scan').ajaxForm(options);
				jQuery('#exploit_scan_custom').ajaxForm(options2);
				
			}); 
			function showRequest(formData, jqForm, options) {
				jQuery('#loader').show();
				jQuery('#output1').hide();
			}
			function showResponse(responseText, statusText)  { 
				jQuery('#loader').hide();
				jQuery('#output1').show();
				return false;
			} 
			 
		</script>
		<?php
		if ( isset( $_GET['scan'] ) && $_GET['scan'] == 'all' ) {
			check_admin_referer( 'exploitscanner-scan_all' );
			$scanner = new Exploit_Scanner( ABSPATH );
			$scanner->file_size_limit = ( empty( $_POST['filesize_limit'] ) ) ? 400 : (int) $_POST['filesize_limit'];
			$scanner->memory_limit = ( empty( $_POST['memory_limit'] ) ) ? '' : (int) $_POST['memory_limit'];
			$scanner->skip_checks = ( empty( $_POST['skip_checks'] ) ) ? array() : $_POST['skip_checks'];
			$scanner->display_severities = ( empty( $_POST['show'] ) ) ? $scanner->display_severities : (array) $_POST['show'];
			array_push( $scanner->display_severities, 'raw' );
			$scanner->run( $_POST['scans'] );
			echo '<div id="output1">' . $scanner->get_html_result() . '</div>';
		} elseif ( isset( $_GET['customscan'] ) ) {
			check_admin_referer( 'exploitscanner-scan_customstrings' );
			$strings = explode( ',', $_GET['customscan'] );
			$scanner = new Exploit_Scanner( ABSPATH );
			$scanner->restricted_commands = array();
			$scanner->whitelist_patterns = array();
			$scanner->restricted_patterns = array();
			$scanner->display_severities = array('blocker');
			$scanner->skip_checks = ( empty( $_POST['skip_checks'] ) ) ? array( 'file_permission_scan' ) : $_POST['skip_checks'];
			foreach ( (array) $strings as $string ) {
				$scanner->restricted_patterns[ "|" . preg_quote($string) . "|msiU" ] = array( "level" => "Blocker", "note" => "Found string " . esc_html($string) );
			} 
			$scanner->file_size_limit = ( empty( $_POST['filesize_limit'] ) ) ? 400 : (int) $_POST['filesize_limit'];
			$scanner->memory_limit = ( empty( $_POST['memory_limit'] ) ) ? '' : (int) $_POST['memory_limit'];
			$scanner->run( array( 'file_scan', 'db_scan' ) );
			echo '<div id="output1">' . $scanner->get_html_result() . '</div>';
		} else {
			?>
			<div id="output1"></div>
			<div id="loader" style="display:none; margin: 10px; padding: 10px; border: 1px solid #333; margin-top: 30px; text-align: center">
				<p><strong>Searching your filesystem and database for hidden links, malicious JavaScript and other possible exploit code</strong><br /><br />Please wait while loading...</p>
				<img src="<?php echo WP_PLUGIN_URL; ?>/exploit-scanner/loader.gif" height="16px" width="16px" alt="loading-icon" />
			</div>
			<?php
		}
		?>
		<h4>DISCLAIMER</h4>
		<p>Unfortunately it's impossible to catch every hack, and it's also too easy to catch "false positives" or things that aren't hacks. If you have been hacked, this script may help you track down what files, comments or posts have been modified. On the other hand, if this script indicates your blog is clean, don't believe it. This is far from foolproof. </p>
		
		<h5>For the paranoid...</h5>
		<p>To prevent someone hiding malicious code inside this plugin and to check that the signatures file (hashes.txt) hasn't been changed, here are the MD5 hashes of these files. Compare them with the references on the plugin homepage. If they match, this file is ok. You'll get extra points if you check this file has the actual md5_file() calls.</p>
		<p style="text-align: center">MD5 of exploit-scanner.php: <code><?php echo md5_file(__FILE__); ?></code></p>
		<?php if ( file_exists( dirname( __FILE__ ) . '/hashes-' . $wp_version . '.php' ) ) { ?>
			<p style="text-align: center">MD5 of hashes-<?php echo $wp_version; ?>.php: <code><?php echo md5_file( dirname( __FILE__ ) . '/hashes-' . $wp_version . '.php' ); ?></code></p>
		<?php } ?>
	</div>
<?php }
